// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(191)
  email      String   @unique @db.VarChar(191)
  provider   String   @db.VarChar(100)
  image      String?
  oauth_id   String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  Category        Category[]
  Reataurent      Restaurant[]
  Dish            Dish[]
  Dish_Combo      Dish_Combo[]
  DishOnDishCombo DishOnDishCombo[]

  @@map("users")
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(191)
  image       String?
  user        User       @relation(fields: [created_by], references: [id], onDelete: Cascade)
  created_by  Int
  description String     @db.VarChar(200)
  servedby    Restaurant @relation(fields: [served_by], references: [id], onDelete: Cascade)
  served_by   Int
  created_at  DateTime   @default(now())
  updated_at  DateTime   @default(now()) @updatedAt

  Dish Dish[]

  @@index([created_at])
  @@map("food_category")
}

model Restaurant {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(191)
  description String  @db.VarChar(200)
  image       String? @db.VarChar(191)

  user       User     @relation(fields: [owned_by], references: [id], onDelete: Cascade)
  owned_by   Int
  location   String   @db.VarChar(200)
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  Dish       Dish[]
  Dish_Combo Dish_Combo[]
  Category   Category[]

  @@index([created_at])
  @@map("restaurant")
}

model Dish {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(191)
  description String  @db.VarChar(200)
  image       String?
  price       Int     @db.Integer()
  isAvailable Boolean @db.Boolean()
  user        User    @relation(fields: [created_by], references: [id], onDelete: Cascade)
  created_by  Int

  servedby  Restaurant @relation(fields: [served_by], references: [id], onDelete: Cascade)
  served_by Int

  category      Category @relation(fields: [food_category], references: [id], onDelete: Cascade)
  food_category Int

  created_at DateTime @default(now())

  updated_at      DateTime          @default(now()) @updatedAt
  DishOnDishCombo DishOnDishCombo[]

  @@index([created_at])
  @@map("dish")
}

model Dish_Combo {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(191)
  description String  @db.VarChar(200)
  image       String?

  price       Int     @db.Integer()
  isAvailable Boolean @db.Boolean()
  user        User    @relation(fields: [created_by], references: [id], onDelete: Cascade)
  created_by  Int

  servedby  Restaurant @relation(fields: [served_by], references: [id], onDelete: Cascade)
  served_by Int

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  DishOnDishCombo DishOnDishCombo[]

  @@index([created_at])
  @@map("dish_combo")
}

model DishOnDishCombo {
  id          Int        @id @default(autoincrement())
  dish        Dish       @relation(fields: [dishId], references: [id], onDelete: Cascade)
  dishId      Int
  dishCombo   Dish_Combo @relation(fields: [dishComboId], references: [id], onDelete: Cascade)
  dishComboId Int
  user        User       @relation(fields: [created_by], references: [id], onDelete: Cascade)
  created_by  Int

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@index([created_at])
  @@map("dish_on_dish_combo")
}
